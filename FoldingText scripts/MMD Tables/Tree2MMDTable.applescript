property pTitle : "Selected FT Tree to Clipboard as MMD table"property pVer : "0.01"property pExample : "|Heilmeier's catechism|||||||||
|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|
|A set of questions credited to Heilmeier that anyone proposing a research project or product development effort should be able to answer.|||||||||
|What ?|||Why ?||At what cost ?|||And how will we know it has worked ?|
|What are you trying to do? Articulate your objectives using absolutely no jargon.|How is it done today, and what are the limits of current practice?|What's new in your approach and why do you think it will be successful?|Who cares?|If you're successful, what difference will it make?|What are the risks and the payoffs?|How much will it cost?|How long will it take?|What are the midterm and final \"exams\" to check for success?|
|-|-|-|Audience|-|-|-|-|-|
|-|-|-|Intermediaries|-|-|-|-|-|
"property plstSeen : {}property pstrCell : ":---------:|"property pstrFiller : "-" -- (for empty cells in the tree-table)on run	-- GET THE SUBTREE(S) OF THE LINE(S) SELECTED IN OMNIFOCUS	set lstNested to GetFTSelnTree()		-- CREATE A SPANNING TABLE VERSION IN MMD FORMAT	set strTable to MakeMMDTable(lstNested)		-- PLACE IN THE CLIPBOARD	set the clipboard to strTableend run-- GET THE MAXIMUM DEPTH OF A PEER GROUP OF SUB-TREESon MaxDepth(lst)	set {lngDepth, lngMax} to {0, 0}	repeat with oNode in lst		set lstChiln to last item of oNode		if lstChiln ≠ {} then			set lngDepth to MaxDepth(lstChiln) + 1		else			set lngDepth to 1		end if		if lngDepth > lngMax then set lngMax to lngDepth	end repeat	return lngMaxend MaxDepth-- TRANSLATE A NESTED LIST OF TEXTS INTO AN MMD SPANNING TABLEon MakeMMDTable(lstNested)	set str to "|"	set lngRows to MaxDepth(lstNested)	set lngWidth to LeafWidth(lstNested)		-- TOP ROW	lstNested	set lstRow to GetRow(lstNested, 1)	set str to MakeMMDRow(lstRow) & linefeed		-- RULER	set str to str & "|"	repeat with i from 1 to lngWidth		set str to str & pstrCell	end repeat	set str to str & linefeed		-- REMAINING ROWs	repeat with i from 2 to lngRows		set lstRow to GetRow(lstNested, i)		lstRow		set str to str & MakeMMDRow(lstRow) & linefeed	end repeat		return strend MakeMMDTable-- TRANSLATE A ROW OF PEERS INTO A LINE OF MMD TABLEon MakeMMDRow(lstRow)	set str to "|"	repeat with oCell in lstRow		set {lngWidth, strText} to oCell		set str to str & strText		repeat with i from 1 to lngWidth			set str to str & "|"		end repeat	end repeat	return strend MakeMMDRow-- RETRIEVE THE SEQUENCE OF PEERS AT A GIVEN LEVEL OF THE TREEon GetRow(lst, lngDepth)	set lstRow to {}	if lngDepth ≤ 1 then		if lst ≠ {} then			repeat with oNode in lst				set end of lstRow to items 1 thru 2 of oNode			end repeat		else			set end of lstRow to {1, pstrFiller}		end if	else		if lst ≠ {} then			repeat with oNode in lst				set lstChiln to last item of oNode				set lstRow to lstRow & GetRow(lstChiln, lngDepth - 1)			end repeat		else			set end of lstRow to {1, pstrFiller}		end if	end if	return lstRowend GetRow-- WHAT IS THE FULL WIDTH, IN TERMINAL LEAVES, OF THIS (SET OF) TREE(S)on LeafWidth(lst)	set lngTotal to 0	repeat with i from 1 to length of lst		set oNode to item i of lst		set lngNode to 0		set lstChiln to last item of oNode		if lstChiln ≠ {} then			set lngNode to lngNode + LeafWidth(lstChiln)		else			set lngNode to 1		end if		set beginning of oNode to lngNode		set lngTotal to lngTotal + lngNode	end repeat	return lngTotalend LeafWidth-- THE THE SUBTREE(S) OF THE OUTLINE ROWS SELCTED IN FOLDINGTEXTon GetFTSelnTree()	tell application "FoldingText"		set lstDocs to documents		if lstDocs ≠ {} then			set oDoc to item 1 of lstDocs			tell oDoc				set recSeln to read selection				if recSeln is missing value then return {}				set lstNodes to (read nodes at path (nodePath of recSeln))				set plstSeen to {}				set lstTree to {}				repeat with oNode in lstNodes					set strID to |id| of oNode					if plstSeen does not contain strID then						set end of plstSeen to strID						set end of lstTree to my GetSubTree(oDoc, oNode)					end if				end repeat				return lstTree			end tell		else			return {}		end if	end tellend GetFTSelnTree-- GET THE FULL SUB-TREE OF NON BLANK LINES FOR A GIVEN OUTLINE ROWon GetSubTree(oDoc, oNode)	tell application "FoldingText"		tell oDoc			set lstChiln to read nodes at path ("//@id=" & |id| of oNode & "/@type!=empty")			set lstTree to {}			if lstChiln ≠ {} then				repeat with i from 1 to length of lstChiln					set oChild to item i of lstChiln					set strID to |id| of oChild					if plstSeen does not contain strID then						set end of plstSeen to strID						set end of lstTree to my GetSubTree(oDoc, oChild)					end if				end repeat			end if			return {|text| of oNode, lstTree}		end tell	end tellend GetSubTree